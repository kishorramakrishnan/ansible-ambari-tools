- name: Get ambari java home
  run_once: true
  become: true
  become_user: root
  local_action:
    module: set_fact
    java_home: '{{ "/etc/ambari-server/conf/ambari.properties" | get_ambari_java_home }}'

- name: set CA cert path and all hosts
  become: true
  become_user: root
  local_action:
    module: set_fact
    java_ca_cert_path: "{{ java_home }}/jre/lib/security/cacerts"

- name: create directory for certificates (local)
  delegate_to: localhost
  file:
    path: "{{ certs_local_dir }}"
    state: directory
  run_once: true
  become: true
  become_user: root

- name: create directory for certificates
  file:
    path: "{{ certs_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  become: true
  become_user: root


- name: create root CA certificate (local)
  delegate_to: localhost
  command: >
    openssl req
      -new
      -x509
      -sha256
      -newkey "rsa:2048"
      -subj "{{ certs_ca_subject }}"
      -keyout "{{ certs_ca_key }}"
      -out "{{ certs_ca_cert }}"
      -days "{{ certs_ca_days }}"
      -passin "pass:{{ certs_ca_password }}"
      -passout "pass:{{ certs_ca_password }}"
  args:
    chdir: "{{ certs_local_dir }}"
    creates: "{{ certs_ca_cert }}"
  run_once: true
  when: certs_use_local_ca
  become: true
  become_user: root


- name: create keystore file
  command: >
    keytool -genkeypair
      -alias "{{ certs_local_alias | default(ansible_fqdn) }}"
      -dname "CN={{ ansible_fqdn }},{{ certs_jks_subject_suffix }}"
      -keystore "{{ certs_jks_file }}"
      -keypass "{{ certs_jks_key_password }}"
      -storepass "{{ certs_jks_store_password }}"
      -keyalg RSA
      -sigalg SHA256withRSA
      -keysize "{{ certs_jks_keysize }}"
      -ext "SAN=dns:{{ ansible_fqdn }}"
  args:
    chdir: "{{ certs_dir }}"
    creates: "{{ certs_jks_file }}"
  become: true
  become_user: root


- name: change ownership of keystore file
  file:
    path: "{{ certs_dir }}/{{ certs_jks_file }}"
    owner: root
    group: root
    mode: 0644
  become: true
  become_user: root


- name: create certificate request
  command: >
    keytool -certreq
      -alias "{{ certs_local_alias | default(ansible_fqdn) }}"
      -file "{{ certs_jks_req }}"
      -keystore "{{ certs_jks_file }}"
      -keypass "{{ certs_jks_key_password }}"
      -storepass "{{ certs_jks_store_password }}"
      -ext "SAN=dns:{{ ansible_fqdn }}"
  args:
    chdir: "{{ certs_dir }}"
    creates: "{{ certs_jks_req }}"
  become: true
  become_user: root

- name: create openssl config to include SAN (SubjectAlternativeNames)
  become: true
  template:
    src: san.cnf.j2
    dest: "{{ certs_dir }}/san_{{ ansible_fqdn }}.cnf"
  become_user: root


- name: pull certificate requests
  become: true
  fetch:
    src: "{{ certs_dir}}/{{ certs_jks_req }}"
    dest: "{{ certs_local_dir }}/{{ component_prefix }}/{{ inventory_hostname }}_{{ certs_jks_req }}"
    flat: yes
  args:
    creates: "{{ certs_local_dir }}/{{ component_prefix }}/{{ inventory_hostname }}_{{ certs_jks_req }}"
  become_user: root


- name: pull openssl conf files needed for signing with SAN extension
  fetch:
    src: "{{ certs_dir}}/san_{{ inventory_hostname }}.cnf"
    dest: "{{ certs_local_dir }}/{{ component_prefix }}/san_{{ inventory_hostname }}.cnf"
    flat: yes
  args:
    creates: "{{ certs_local_dir }}/{{ component_prefix }}/san_{{ inventory_hostname }}.cnf"
  become: true
  become_user: root


- name: sign certificate requests (local)
  delegate_to: localhost
  command: >
    openssl x509
      -req
      -in "{{ component_prefix }}/{{ inventory_hostname }}_{{ certs_jks_req }}"
      -out "{{ component_prefix }}/{{ inventory_hostname }}_{{ certs_jks_cert }}"
      -days "{{ certs_ca_sign_days }}"
      -CA "{{ certs_ca_cert }}"
      -CAkey "{{ certs_ca_key }}"
      -CAcreateserial
      -passin "pass:{{ certs_ca_password }}"
      -extensions v3_req
      -extfile "{{ component_prefix }}/san_{{ inventory_hostname }}.cnf"
  args:
    chdir: "{{ certs_local_dir }}"
    creates: "{{ component_prefix }}/{{ inventory_hostname }}_{{ certs_jks_cert }}"
  when: certs_use_local_ca
  become: true
  become_user: root

- name: sign certificate requests (external)
  pause:
    prompt: "Sign all *_{{ cert_jks_req }} files in {{ certs_dir }} directory"
  when: not certs_use_local_ca

- name: push certificates
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
    - src: "{{ certs_local_dir }}/{{ component_prefix }}/{{ inventory_hostname }}_{{ certs_jks_cert }}"
      dest: "{{ certs_dir}}/{{ certs_jks_cert }}"
    - src: "{{ certs_local_dir }}/{{ certs_ca_cert }}"
      dest: "{{ certs_dir }}/{{ certs_ca_cert }}"
  become: true
  become_user: root

- name: import certificates
  command: >
    keytool -import
      -keystore "{{ certs_dir }}/{{ certs_jks_file }}"
      -alias "{{ item.alias }}"
      -file "{{ certs_dir }}/{{ item.file }}"
      -keypass "{{ certs_jks_key_password }}"
      -storepass "{{ certs_jks_store_password }}"
      -noprompt
  loop:
    - alias: "{{ certs_ca_alias }}"
      file: "{{ certs_ca_cert }}"
    - alias: "{{ certs_local_alias | default(ansible_fqdn) }}"
      file: "{{ certs_jks_cert }}"
  loop_control:
    label: "{{ item.alias }}"
  become: true
  become_user: root

- name: import the signing certificate to cacertstore
  become: true
  become_user: root
  command: >
    keytool -import
      -noprompt
      -alias "rangerAgent{{ component_prefix }}{{ ansible_fqdn }}Trust"
      -file "{{ certs_dir }}/{{ certs_ca_cert }}"
      -keystore "{{ java_ca_cert_path }}"
      -storepass "{{ java_jks_store_password }}"
  when: install_ranger is defined and install_ranger == true
